import { Command } from "cmdk";
import { Dispatch, SetStateAction, useEffect, useState } from "react";
import { FiEye, FiLink, FiLogOut, FiPhone, FiPlus } from "react-icons/fi";
import search from "../../assets/svg/MagnifyingGlass.svg";
import { IoIosCloseCircle } from "react-icons/io";
export const CommandMenu = ({ open, setOpen }) => {
  const [value, setValue] = useState("");

  const [searchTerm, setSearchTerm] = useState(""); // For user input
  const [hotels, setHotels] = useState([]); // To store fetched hotel data
  const [loading, setLoading] = useState(false); // Loading state
  const [error, setError] = useState(null); // Error state

  // Function to fetch hotels by name
  const fetchHotels = async () => {
    if (!searchTerm) return; // Prevent search if input is empty

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(
        `https://booking-com15.p.rapidapi.com/api/v1/hotels/searchDestination?query=${encodeURIComponent(
          searchTerm
        )}`,
        {
          method: "GET",
          headers: {
            "x-rapidapi-host": "booking-com15.p.rapidapi.com",
           "x-rapidapi-key":  REACT_APP_RAPID_API, // Replace with your actual API key
          },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch data");
      }

      const data = await response.json();
      setHotels(data.data || []); // Assuming results array is in `data`
    } catch (err) {
      setError(err.message || "Something went wrong");
    } finally {
      setLoading(false);
    }
  };

  {
    /* Loading Indicator */
  }
  {
    loading && <p>Loading...</p>;
  }

  {
    /* Error Message */
  }
  {
    error && <p className="text-red-500">{error}</p>;
  }

  return (
    <Command.Dialog
      open={open}
      onOpenChange={setOpen}
      label="Global Command Menu"
      className="fixed inset-0 bg-stone-950/50 backdrop-blur-[2px]"
      onClick={() => setOpen(false)}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        className=" h-full overflow-y-auto  w-[50vw] mx-auto mt-[7%]"
      >
        <div className="flex flex-col mb-2">
          <Command.List className="p-3 bg-white rounded-t">
            <div className="flex items-center gap-3">
              <button className=" px-2 border border-black_secondary  cursor-pointer transition-colors p-2 text-sm text-stone-950 hover:bg-stone-200 rounded items-center gap-2">
                Serach Hotels
              </button>
              <button className=" px-2 border border-black_secondary  cursor-pointer transition-colors p-2 text-sm text-stone-950 hover:bg-stone-200 rounded items-center gap-2">
                Serach Hotels by Destination
              </button>
              <button className=" px-2 border border-black_secondary  cursor-pointer transition-colors p-2 text-sm text-stone-950 hover:bg-stone-200 rounded items-center gap-2">
                Search Flight
              </button>
              <button className=" px-2 border border-black_secondary  cursor-pointer transition-colors p-2 text-sm text-stone-950 hover:bg-stone-200 rounded items-center gap-2">
                Search Flight location
              </button>
              <button className=" px-2 border border-black_secondary  cursor-pointer transition-colors p-2 text-sm text-stone-950 hover:bg-stone-200 rounded items-center gap-2">
                Search Attraction
              </button>
            </div>
          </Command.List>
          <div className="flex justify-between items-center bg-white rounded- px-3">
            <img className="" src={search} alt="search" />
            <input
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="What do you need?"
              className="relative bg-transparent p-3 text-lg w-full placeholder:text-stone-400 focus:outline-none"
            />

            <button
              onClick={fetchHotels}
              className="mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              Search
            </button>
          </div>
          <div className="w-full h-[46px] rounded-b bg-white border-t border-primary_100"></div>
        </div>

        <div className="mt-4 max-h-[60vh] overflow-auto bg-white  rounded p-3 flex gap-5 flex-col">
          {hotels.length > 0
            ? hotels.map((hotel, index) => (
                <div
                  key={hotel.id || index}
                  className="flex items-center gap-3"
                >
                  <div className="w-[100px] h-[100px] bg-black rounded flex items-center justify-center overflow-hidden">
                    {hotel.image_url ? (
                      <img
                        src={hotel.image_url}
                        className="rounded w-full h-full object-cover"
                        alt={`Image of ${hotel.hotel_name}`}
                      />
                    ) : (
                      <span className="text-white text-sm text-center">
                        No image available
                      </span>
                    )}
                  </div>
                  <div>
                    <h4 className="font-bold text-lg">{hotel.label}</h4>
                    <p>{hotel.name || "Unknown"},{hotel.country}</p>
                    <p>Hotels Available around here : {hotel.hotels || "N/A"}</p>
               
                  </div>
                </div>
              ))
            : !loading && <p>No hotels found. Try a different name.</p>}
        </div>
      </div>
    </Command.Dialog>
  );
};
